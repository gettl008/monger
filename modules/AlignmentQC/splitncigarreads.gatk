#!/usr/bin/env bash
#define MAX_ARG_PAGES 32
set -e
export SHELL=$(type -p bash)
. ~/.bashrc
# freemem=`free | awk '{print $4}'`
# freemem=`echo $freemem | cut -d' ' -f4`
# MEMLIMIT=`expr $freemem \/ 4 \* 3`
export _JAVA_OPTIONS=-Xmx8g
###############################################
MODULE_NAME=`basename "$0" | tr "[a-z]" "[A-Z]"`
module_name=`basename "$0" | tr "[A-Z]" "[a-z]"`
function beginswith { 
	case $2 in 
		"$1"*) true;; 
		*) false;; 
	esac
}
###############################################
###################
### MODULE INFO ###
###################
DESCRIPTION="This tool identifies all N cigar elements in sequence reads, and creates k+1 new reads (where k is the number of N cigar elements) that correspond to the segments of the original read beside/between the splicing events represented by the Ns in the original CIGAR. "
WEBSITE="https://software.broadinstitute.org/gatk/documentation/tooldocs/org_broadinstitute_gatk_tools_walkers_rnaseq_SplitNCigarReads.php"
CITATIONS=
MODULE_AUTHOR="Noah Gettle"
YEAR_WRITTEN="2016"
###############################################
MODULE_INFO="DESCRIPTION:\n$DESCRIPTION\nWEBSITE:\n$WEBSITE\nCITATION:\n$CITATION"
AUTHOR_INFO="$MODULE_AUTHOR $YEAR_WRITTEN"

function run {
	MODULE_NAME=$1
	shift
	MODULE_INFO=$1
	shift
	AUTHOR_INFO=$1
	shift
	module_name=`echo $MODULE_NAME | tr "[A-Z]" "[a-z]"`
	SUBTHREADS=1
	####################################
	########### FUNCTIONS ##############
	####################################

	function time_elapsed {
		end_time=`date +%s`
		elapsed_secs=`expr $end_time - $1`
		date -u -d @${elapsed_secs} +"%T"
	}
	
	####################################
	############ USAGE #################
	####################################
	usage="SYNOPSIS:\nmonger run $module_name\n$MODULE_INFO\n\
OPTIONS:\n\
  -1 | --input1\t[FILE]\tBAM/SAM input to evaluate.\n\
  -n | --name\t[STR]\tSample name (basename of outputs)\n\
  -o | --outdir\t[DIR]\tOutput directory\n\
  -t | --threads\n\
  -A | --args\t[STR]\tArguments specified as variables in a bash file.\n\
  -f | --force\t\t\tOverwrite existing files.\n\
  -S | --sort\t[c|n]\tSort outputs by alignment coordinate (c) or read name (n) [c]\n\
  -O | --output_format\t[bam|sam]\tOutput format for alignments [bam]\n\
  -h | --help\t\t\tPrint help message\n\n\
AUTHOR:\n\
$AUTHOR_INFO"

	####################################
	######## INPUT PROCESSING ##########
	####################################
	FORCE=FALSE
	if [ $# -eq 0 ]
	then
		echo -e $usage
		exit 1
	fi

	#################
	# Program specific defaults
	sort=c
	output_format=bam
	merge=false
	remove=false
	
	#################
	while [ "$1" != "" ]
	do
		case $1 in
			-1 | --input1)
				if ! `beginswith "-" "$2"`
				then
					shift
					if ! test -f $1
					then
						echo -e "\nMONGER RUN $MODULE_NAME ERROR: Cannot find input file $1."
						exit 1
					else
						in1=$1
					fi
				fi;;
			-2 | --input2)
				if ! `beginswith "-" "$2"`
				then
					shift
					if ! test -f $1
					then
						echo -e "\nMONGER RUN $MODULE_NAME WARNING: Cannot find input file $1. Skipping...\n"
					else
						in2="$1"
					fi
				fi;;
			-3 | --input3)
				if ! `beginswith "-" "$2"`
				then
					shift
					if ! test -f $1
					then
						echo -e "\nMONGER RUN $MODULE_NAME WARNING: Cannot find input file $1. Skipping...\n"
					else
						in3="$1"
					fi
				fi;;
			-I | --input_list)
				if ! `beginswith "-" "$2"`
					then
						shift
						if ! test -f $1
							then
									echo -e "\nMONGER RUN $MODULE_NAME ERROR: Cannot find input file list $1.\n"
									exit 1
							else
									input_list=$1
									field_num=`awk -F'[\t ]' '{print NF}' $input_list`
									name=`awk -F'[\t ]' -v last_field="$field_num" '{print $last_field}' $input_list`
									index=1
									while [ $index -lt $field_num ]
									do
										input=`awk -F'[\t ]' -v field="$index" '{print $field}' $input_list`
										if ! test -f "$input"
										then
											echo -e "\nMONGER RUN $MODULE_NAME WARNING: Cannot find input file $input. Skipping...\n"
										else
											inputs="$inputs $input"
											declare "in$index=$input"
										fi
										index=$(($index + 1))
									done
							fi
					fi;;	
			-n | --name)
				if ! `beginswith "-" "$2"`
				then
					shift
					name=$1
				fi;;
			-o | --outdir)
				if ! `beginswith "-" "$2"`
				then
					shift
					outdir=$1
					mkdir -p $outdir
					if ! test -d $outdir
					then
						echo -e "\nMONGER RUN $MODULE_NAME ERROR: Could not find or create output directory $outdir.\n"
						exit 1
					fi
				fi;;
			-t | --threads)
				if ! `beginswith "-" "$2"`
				then
					shift
					SUBTHREADS=$1
				fi;;
			-A | --args)
				shift
				. $1;;
			-f | --force)
				force=true;;
			# -m | --maxmem)
			# 	shift
			# 	maxmem=$1
			# 	export _JAVA_OPTIONS=-Xmx$maxmem;;
			# 	# ulimit -v $maxmem;;
			-h | --help)
				echo -e $usage
				exit 1;;
			*)
				echo -e "\nMONGER RUN $MODULE_NAME ERROR: $1 is not a valid option.\n$usage"
				exit 1;;
			-s | --sort)
				if ! `beginswith "-" "$2"`
				then
					shift
					temp=`echo "$1" | tr '[A-Z]' '[a-z]'`
					if [ "$temp" == "c" ] || [ "$temp" == "n" ]
					then
						sort=$temp
					else
						echo -e "MONGER RUN $MODULE_NAME WARNING: Sort method must be either by alignment coordinate (c) or by read name (n). Using default \"c\"."
					fi
				fi;;
			-O | --output_format)
				if ! `beginswith "-" "$2"`
				then
					shift
					temp=`echo "$1" | tr '[A-Z]' '[a-z]'`
					if [ "$temp" == "bam" ] || "$temp" == "sam"
					then
						output_format=$temp
					else
						echo -e "MONGER RUN $MODULE_NAME WARNING: Output format must be either \"bam\" or \"sam\". Using default \"bam\"."
					fi
				fi;;
		esac
		shift
	done
	
	if [ "$name" == "" ]
	then
		name=`echo $inputs | cut -d' ' -f1 | basename`
		name="${name%.*}"
	fi
	mkdir -p $outdir/logs
	mkdir -p $outdir/resume
	mkdir -p $outdir/program_logs
	mkdir -p $outdir/commands
	log_file=$outdir/logs/$name.log.txt
	resume_file=$outdir/resume/$name.resume.txt
	program_log_file=$outdir/program_logs/$name.program_log.txt
	current_proglog=$outdir/program_logs/$name.current_proglog.txt
	command_file=$outdir/commands/$name.commands.txt
	current_command=$outdir/commands/$name.current_command.txt
	main_start=`date +%s`
	if ! test -f $resume_file || [ "$force" == "true" ]
	then
		echo -e "$MODULE_NAME:" > $log_file
		echo -e "# $MODULE_NAME" > $command_file
		echo -e "$MODULE_NAME" > $resume_file
		echo -e "$MODULE_NAME" > $program_log_file
	fi

	#######################################################
	##### COMMAND CHECK AND INSTALL REQUIRED PROGRAMS #####
	#######################################################
	if ! type "samtools" >/dev/null 2>/dev/null 
	then
		monger install samtools
	else
		samtools --version > /tmp/samtoolsversion.txt 2>&1
		if ! `grep -q "samtools 1.3" /tmp/samtoolsversion.txt`
		then
			monger install samtools
		fi
	fi
	if ! type "picard.jar" >/dev/null 2>/dev/null 
	then
		monger install picard
	fi
	if ! type "gatk" >/dev/null 2>/dev/null 
	then
		monger install gatk
	fi
	#######################################################
	picard=`which picard.jar`
	gatk=`which gatk.jar`
	if ! test -f $REFERENCE_FASTA.fai
	then
		samtools faidx $REFERENCE_FASTA
	fi
	ref_base=${REFERENCE_FASTA%.*}
	if ! test -f $ref_base.dict
	then
		java -jar $picard CreateSequenceDictionary \
			R=$REFERENCE_FASTA \
			O=$ref_base.dict \
			2>> $outdir/program_log.txt
	fi
	mkdir -p $outdir/intermediates
	####################################
	########## MAIN PROGRAM ############
	####################################
	echo -e "Inputs: $inputs" >> $log_file
	# PROGRAM
	##############################
	STEP_NAME="splitncigarreads"
	if [ "`grep "$STEP_NAME.$name=complete" $resume_file`" == "" ] || [ "$force" == "true" ]
	then
		# Process start time
		start=`date +%s`
		echo -e "MONGER RUN $MODULE_NAME: Beginning step \"$STEP_NAME\" for \"$name\"."
		echo -e "$STEP_NAME:" >> $program_log_file
		#####################################################################################
		command="java -jar $picard ReorderSam \
			I=$in1 \
			O=$outdir/intermediates/$name.reorder.bam \
			R=$REFERENCE_FASTA \
			CREATE_INDEX=TRUE \
			VALIDATION_STRINGENCY=SILENT \
			> $current_proglog 2>&1"
		echo -e "$command\n" > $current_command
		eval $command
		cat $current_command  | sed 's|\s\+| |g' >> $command_file
		cat $current_proglog >> $program_log_file
		command="java -jar $gatk -T SplitNCigarReads \
			-R $REFERENCE_FASTA \
			-I $outdir/intermediates/$name.reorder.bam \
			-o $outdir/$name.snt.sam \
			-rf ReassignOneMappingQuality \
			-RMQF 255 \
			-RMQT 60 \
			-U ALLOW_N_CIGAR_READS \
			$splitncigarreads_args \
			> $current_proglog 2>&1"
		echo -e "$command\n" > $current_command
		eval $command
		cat $current_command  | sed 's|\s\+| |g' >> $command_file
		cat $current_proglog >> $program_log_file
		if test -f "$in2"
		then
			command="java -jar $picard ReorderSam \
				I=$in1 \
				O=$outdir/intermediates/$name.unpaired.reorder.bam \
				R=$REFERENCE_FASTA \
				CREATE_INDEX=TRUE \
				VALIDATION_STRINGENCY=SILENT \
				> $current_proglog 2>&1"
			echo -e "$command\n" > $current_command
			eval $command
			cat $current_command  | sed 's|\s\+| |g' >> $command_file
			cat $current_proglog >> $program_log_file
			command="java -jar $gatk -T SplitNCigarReads \
				-R $REFERENCE_FASTA \
				-I $outdir/intermediates/$name.unpaired.reorder.bam \
				-o $outdir/$name.unpaired.snt.sam \
				-rf ReassignOneMappingQuality \
				-RMQF 255 \
				-RMQT 60 \
				-U ALLOW_N_CIGAR_READS \
				$splitncigarreads_args \
				> $current_proglog 2>&1"
			echo -e "$command\n" > $current_command
			eval $command
			cat $current_command  | sed 's|\s\+| |g' >> $command_file
			cat $current_proglog >> $program_log_file
		fi
		#####################################################################################
		echo -e "MONGER RUN $MODULE_NAME: Step \"$STEP_NAME\" for \"$name\" complete."
		main_output=$outdir/$name.snt.sam
		unpaired_output=$outdir/$name.unpaired.snt.sam
		#################
		elapsed=`time_elapsed $start`
		echo -e "$STEP_NAME: $elapsed" >> $log_file
		echo "$STEP_NAME.$name=complete" >> $resume_file
	else
		echo -e "MONGER RUN $MODULE_NAME: Step \"$STEP_NAME\" already complete for file \"$name\". Skipping..."
		main_output=$outdir/$name.snt.sam
		unpaired_output=$outdir/$name.unpaired.snt.sam
	fi
	##############################
	STEP_NAME="sort_alignments"
	if [ "sort" != "" ]
	then
		if [ "`grep "$STEP_NAME.$name=complete" $resume_file`" == "" ] || [ "$force" == "true" ]
		then
			# Process start time
			start=`date +%s`
			echo -e "MONGER RUN $MODULE_NAME: Beginning step \"$STEP_NAME\" for \"$name\"."
			echo -e "$STEP_NAME:" >> $program_log_file
			#####################################################################################
			if [ "sort" == "n" ]
			then
				in_sort="-$sort"
			fi
			command="samtools sort \
				$insort \
				-@ $SUBTHREADS \
				-o $outdir/$name.sort.$output_format \
				$main_output \
				> $current_proglog 2>&1"
			echo -e "$command\n" > $current_command
			eval $command
			cat $current_command  | sed 's|\s\+| |g' >> $command_file
			cat $current_proglog >> $program_log_file
			if [ "$output_format" == "bam" ]
			then
				command="samtools index $outdir/$name.sort.$output_format \
					> $current_proglog 2>&1"
				echo -e "$command\n" > $current_command
				eval $command
				cat $current_command  | sed 's| \+| |g' >> $command_file
				cat $current_proglog >> $program_log_file
			fi
			mv $main_output $outdir/intermediates/
			if test -f "$unpaired_output"
			then
				command="samtools sort \
					$sort \
					-@ $SUBTHREADS \
					-o $outdir/$name.unpaired.sort.$output_format \
					$unpaired_output \
					> $current_proglog 2>&1"
				echo -e "$command\n" > $current_command
				eval $command
				cat $current_command  | sed 's|\s\+| |g' >> $command_file
				cat $current_proglog >> $program_log_file
				if [ "$output_format" == "bam" ]
				then
					command="samtools index $outdir/$name.unpaired.sort.$output_format \
						> $current_proglog 2>&1"
					echo -e "$command\n" > $current_command
					eval $command
					cat $current_command  | sed 's|\s\+| |g' >> $command_file
					cat $current_proglog >> $program_log_file
				fi
				mv $unpaired_output $outdir/intermediates/
			fi
			#####################################################################################
			echo -e "MONGER RUN $MODULE_NAME: Step \"$STEP_NAME\" for \"$name\" complete."
			main_output=$outdir/$name.sort.$output_format
			unpaired_output=$outdir/$name.unpaired.sort.$output_format
			#################
			elapsed=`time_elapsed $start`
			echo -e "$STEP_NAME: $elapsed" >> $log_file
			echo "$STEP_NAME.$name=complete" >> $resume_file
		else
			echo -e "MONGER RUN $MODULE_NAME: Step \"$STEP_NAME\" already complete for file \"$name\". Skipping..."
			main_output=$outdir/$name.sort.$output_format
			unpaired_output=$outdir/$name.unpaired.sort.$output_format
		fi
	fi
	#####################################################################################
	# Record output info for downstream modules
	mkdir -p $outdir/outputs
	if test -f "$unpaired_output"
	then
		echo -e "$main_output\t$unpaired_output\t$name" >  $outdir/outputs/$name.outputs.txt
	else
		echo -e "$main_output\t$name" >  $outdir/outputs/$name.outputs.txt
	fi
	main_elapsed=`time_elapsed $main_start`
	sed -i "s|$MODULE_NAME\:.*|$MODULE_NAME\: $main_elapsed|" $log_file
	echo -e "MONGER RUN $MODULE_NAME: Complete."
}

############################################################
if [ "$1" == "run" ]
then
	shift
	run "$MODULE_NAME" "$MODULE_INFO" "$AUTHOR_INFO" $*
elif [ "$1" == "install" ]
then
	shift
	mongerinstall "$MODULE_NAME" "$MODULE_INFO" "$AUTHOR_INFO" $*
else
	echo -e \
"SYNOPSIS:\n\
monger [run|install] $module_name\n$MODULE_INFO\n$AUTHOR_INFO"
	exit 1
fi
	
	
	