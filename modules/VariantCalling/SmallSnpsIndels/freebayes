#!/usr/bin/env bash
#define MAX_ARG_PAGES 32
set -e
export SHELL=$(type -p bash)
freemem=`free | awk '{print $4}'`
freemem=`echo $freemem | cut -d' ' -f4`
MEMLIMIT=`expr $freemem \/ 4 \* 3`
export _JAVA_OPTIONS=-Xmx2g
###############################################
MODULE_NAME=`basename "$0" | tr "[a-z]" "[A-Z]"`
module_name=`basename "$0" | tr "[A-Z]" "[a-z]"`
function beginswith { 
	case $2 in 
		"$1"*) true;; 
		*) false;; 
	esac
}
###############################################
###################
### MODULE INFO ###
###################
DESCRIPTION="FreeBayes is a Bayesian genetic variant detector designed to find small polymorphisms, specifically SNPs (single-nucleotide polymorphisms), indels (insertions and deletions), MNPs (multi-nucleotide polymorphisms), and complex events (composite insertion and substitution events) smaller than the length of a short-read sequencing alignment."
WEBSITE="https://github.com/ekg/freebayes"
CITATIONS="Garrison E, Marth G. Haplotype-based variant detection from short-read sequencing. arXiv preprint arXiv:1207.3907 [q-bio.GN] 2012"
MODULE_AUTHOR="Noah Gettle"
YEAR_WRITTEN="2016"
###############################################
MODULE_INFO="DESCRIPTION:\n$DESCRIPTION\nWEBSITE:\n$WEBSITE\nCITATION:\n$CITATION"
AUTHOR_INFO="$MODULE_AUTHOR $YEAR_WRITTEN"

function mongerinstall {
	MODULE_NAME=$1
	shift
	MODULE_INFO=$1
	shift
	AUTHOR_INFO=$1
	shift
	module_name=`echo $MODULE_NAME | tr "[A-Z]" "[a-z]"`
	SUBTHREADS=1
	####################################
	############ USAGE #################
	####################################
	usage="SYNOPSIS:\nmonger install $module_name\n$MODULE_INFO\n\
OPTIONS:\n\
  -i | --install_dir [DIR]\tInstallation directory [/usr/local/]\n\
  -f | --force\t\t\tOverwrite existing program executables.\n\
  -h | --help\t\t\tPrint help message\n\n\
AUTHOR:\n\
$AUTHOR_INFO"
  
	####################################
	######## INPUT PROCESSING ##########
	####################################
	INSTALL_DIR=/usr/local
	FORCE=FALSE
	while [ "$1" != "" ]
	do
		case $1 in
			-i | --install_dir)	
				if ! `beginswith "-" $2`
				then 
					shift
					INSTALL_DIR=$1
				fi;;
			-f | --force)	
				FORCE=TRUE;;
			-h | --help)	
				echo -e $usage
				exit 1;;
			*)				
				echo -e "\nMONGER RUN $MODULE_NAME ERROR: $1 is not a valid option.\n$usage"
				exit 1						
		esac
		shift
	done

	####################################

	PATH_SEP=`echo $PATH | sed 's|:| |g'`
	LD_LIBRARY_PATH_SEP=`echo $LD_LIBRARY_PATH | sed 's|:| |g'`
	INCLUDE_SEP=`echo $INCLUDE | sed 's|:| |g'`

	cur_dir=`pwd`
	DOWNLOAD_DIR=$INSTALL_DIR/soft
	mkdir -p $DOWNLOAD_DIR

	###############################################

	####################################
	###### INSTALL DEPENDENCIES ########
	####################################

	###############################################

	####################################
	###### INSTALL MAIN PROGRAM ########
	####################################

	##########
	# FASTQC #
	##########
	if ! type "freebayes" >/dev/null 2>/dev/null || [ $FORCE == "TRUE" ]
	then
		echo -e "> MONGER INSTALL: Installing $MODULE_NAME."
		cd $DOWNLOAD_DIR
		if ! test -f $DOWNLOAD_DIR/fastqc_v0.11.4.zip
		then
			wget http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4.zip
		fi
		git clone --recursive git://github.com/ekg/freebayes
		unzip $DOWNLOAD_DIR/fastqc_v0.11.4.zip
		cd $INSTALL_DIR/bin
		ln -sf $DOWNLOAD_DIR/FastQC/fastqc ./
		chmod 755 $INSTALL_DIR/bin/fastqc
	else
		echo "> MONGER INSTALL: $MODULE_NAME already installed. Skipping..."
	fi
}
function run {
	MODULE_NAME=$1
	shift
	MODULE_INFO=$1
	shift
	AUTHOR_INFO=$1
	shift
	module_name=`echo $MODULE_NAME | tr "[A-Z]" "[a-z]"`
	SUBTHREADS=1
	####################################
	########### FUNCTIONS ##############
	####################################

	function time_elapsed {
		end_time=`date +%s`
		elapsed_secs=`expr $end_time - $1`
		date -u -d @${elapsed_secs} +"%T"
	}
	
	####################################
	############ USAGE #################
	####################################
	usage="SYNOPSIS:\nmonger run $module_name\n$MODULE_INFO\n\
OPTIONS:\n\
  -1 | --input1\t[FILE]\tBAM/SAM input to evaluate.\n\
  -n | --name\t[STR]\tSample name (basename of outputs)\n\
  -o | --outdir\t[DIR]\tOutput directory\n\
  -t | --threads\n\
  -A | --args\t[STR]\tArguments specified as variables in a bash file.\n\
  -f | --force\t\t\tOverwrite existing files.\n\
  -S | --sort\t[c|n]\tSort outputs by alignment coordinate (c) or read name (n) [c]\n\
  -O | --output_format\t[bam|sam]\tOutput format for alignments [bam]\n\
  -h | --help\t\t\tPrint help message\n\n\
AUTHOR:\n\
$AUTHOR_INFO"

	####################################
	######## INPUT PROCESSING ##########
	####################################
	FORCE=FALSE
	if [ $# -eq 0 ]
	then
		echo -e $usage
		exit 1
	fi

	#################
	# Program specific defaults
	sort=c
	output_format=bam
	
	#################
	while [ "$1" != "" ]
	do
		case $1 in
			-1 | --input1)
				if ! `beginswith "-" "$2"`
				then
					shift
					if ! test -f $1
					then
						echo -e "\nMONGER RUN $MODULE_NAME ERROR: Cannot find input file $1."
						exit 1
					else
						in1=$1
					fi
				fi;;
			-2 | --input2)
				if ! `beginswith "-" "$2"`
				then
					shift
					if ! test -f $1
					then
						echo -e "\nMONGER RUN $MODULE_NAME WARNING: Cannot find input file $1. Skipping...\n"
					else
						in2="$1"
					fi
				fi;;
			-3 | --input3)
				if ! `beginswith "-" "$2"`
				then
					shift
					if ! test -f $1
					then
						echo -e "\nMONGER RUN $MODULE_NAME WARNING: Cannot find input file $1. Skipping...\n"
					else
						in3="$1"
					fi
				fi;;
			-I | --input_list)
				if ! `beginswith "-" "$2"`
				then
					shift
					if ! test -f $1
						then
							echo -e "\nMONGER RUN $MODULE_NAME ERROR: Cannot find input file list $1.\n"
							exit 1
						else
							input_list=$1
							field_num=`awk -F'[\t ]' '{print NF}' $input_list`
							name=`awk -F'[\t ]' -v last_field="$field_num" '{print $last_field}' $input_list`
							index=1
							while [ $index -lt $field_num ]
							do
								input=`awk -F'[\t ]' -v field="$index" '{print $field}' $input_list`
								if ! test -f "$input"
								then
									echo -e "\nMONGER RUN $MODULE_NAME WARNING: Cannot find input file $input. Skipping...\n"
								else
									inputs="$inputs $input"
									declare "in$index=$input"
								fi
								index=$(($index + 1))
							done
						fi
				fi;;	
			-n | --name)
				if ! `beginswith "-" "$2"`
				then
					shift
					name=$1
				fi;;
			-o | --outdir)
				if ! `beginswith "-" "$2"`
				then
					shift
					outdir=$1
					mkdir -p $outdir
					if ! test -d $outdir
					then
						echo -e "\nMONGER RUN $MODULE_NAME ERROR: Could not find or create output directory $outdir.\n"
						exit 1
					fi
				fi;;
			-t | --threads)
				if ! `beginswith "-" "$2"`
				then
					shift
					SUBTHREADS=$1
				fi;;
			-A | --args)
				shift
				. $1;;
			-f | --force)
				force=true;;
			# -m | --maxmem)
			# 	shift
			# 	maxmem=$1
			# 	export _JAVA_OPTIONS=-Xmx$maxmem;;
			# 	# ulimit -v $maxmem;;
			-h | --help)
				echo -e $usage
				exit 1;;
			*)
				echo -e "\nMONGER RUN $MODULE_NAME ERROR: $1 is not a valid option.\n$usage"
				exit 1;;
		esac
		shift
	done
	
	if [ "$name" == "" ]
	then
		name=`echo $inputs | cut -d' ' -f1 | basename`
		name="${name%.*}"
	fi
	mkdir -p $outdir/logs
	mkdir -p $outdir/resume
	mkdir -p $outdir/program_logs
	mkdir -p $outdir/commands
	log_file=$outdir/logs/$name.log.txt
	resume_file=$outdir/resume/$name.resume.txt
	program_log_file=$outdir/program_logs/$name.program_log.txt
	command_file=$outdir/commands/$name.commands.txt
	if ! test -f $resume_file || [ "$force" == "true" ]
	then
		echo -e "$MODULE_NAME" > $log_file
		echo -e "# $MODULE_NAME" > $command_file
		echo -e "$MODULE_NAME" > $resume_file
		echo -e "$MODULE_NAME" > $program_log_file
	fi

	if ! type "samtools" >/dev/null 2>/dev/null 
	then
		monger install samtools
	else
		samtools --version > /tmp/samtoolsversion.txt 2>&1
		if ! `grep -q "samtools 1.3" /tmp/samtoolsversion.txt`
		then
			monger install samtools
		fi
	fi
	if ! test -f $REFERENCE_FASTA.fai
	then
		samtools faidx $REFERENCE_FASTA
	fi
	if ! type "gatk" >/dev/null 2>/dev/null 
	then
		monger install gatk
	fi
	ref_base=${REFERENCE_FASTA%.*}
	picard=`which picard.jar`
	if ! test -f $ref_base.dict
	then
		java -jar $picard CreateSequenceDictionary \
			R=$REFERENCE_FASTA \
			O=$ref_base.dict
	fi
	gatk=`which gatk.jar`
	mkdir -p $outdir/intermediates
	####################################
	########## MAIN PROGRAM ############
	####################################
	echo -e " INPUT:$name" >> $log_file
	# PROGRAM
	##############################
	STEP_NAME="haplotype_caller"
	for file in $inputs
	do
		filename=`basename $file`
		extension="${filename##*.}"
		subname="${filename%.*}"
		if [ "`grep "$STEP_NAME.$subname=complete" $resume_file`" == "" ] || [ "$force" == "true" ]
		then
			# Process start time
			start=`date +%s`
			echo -e "MONGER RUN $MODULE_NAME: Beginning step \"$STEP_NAME\" for \"$subname\"."
			echo -e "$STEP_NAME:" >> $program_log_file
			#####################################################################################
			if [ "$extension" == "sam" ]
			then
				samtools view -b \
					$file \
					> $outdir/intermediates/$subname.bam \
					2>> $program_log_file
				file=$outdir/intermediates/$subname.bam
			fi
			command="java -jar $gatk \
				-T HaplotypeCaller \
				-nct $SUBTHREADS \
				-R $REFERENCE_FASTA \
				-I $file \
				-o $outdir/$subname.g.vcf \
				--emitRefConfidence GVCF \
				$haplotypecaller_args \
				>> $program_log_file 2>&1"
			eval $command
			echo -e "$command\n" >> $command_file
			#####################################################################################
			echo -e "MONGER RUN $MODULE_NAME: Step \"$STEP_NAME\" for \"$subname\" complete."
			main_output="$main_output $outdir/$subname.g.vcf"
			#################
			elapsed=`time_elapsed $start`
			echo -e "  $STEP_NAME=$elapsed" >> $log_file
			echo "$STEP_NAME.$subname=complete" >> $resume_file
		else
			echo -e "MONGER RUN $MODULE_NAME: Step \"$STEP_NAME\" already complete for file \"$subname\". Skipping..."
			main_output="$main_output $outdir/$subname.g.vcf"
		fi
	done
	STEP_NAME="combine_vcfs"
	if [ "$merge" == "true" ]
	then
		if [ "`grep "$STEP_NAME.$name=complete" $resume_file`" == "" ] || [ "$force" == "true" ]
		then
			# Process start time
			start=`date +%s`
			echo -e "MONGER RUN $MODULE_NAME: Beginning step \"$STEP_NAME\" for \"$name\"."
			echo -e "$STEP_NAME:" >> $program_log_file
			#####################################################################################
			for file in $main_output
			do
				merge_in="$merge_in --variant $file"
			done
			command="java -jar $gatk \
				-T CombineGVCFs \
				-R $REFERENCE_FASTA \
				$merge_in \
				-o $outdir/$name.g.vcf \
				$combinevcfs_args \
				>> $program_log_file 2>&1"
			eval $command
			echo -e "$command\n" >> $command_file
			mv $main_output $outdir/intermediates/
			#####################################################################################
			echo -e "MONGER RUN $MODULE_NAME: Step \"$STEP_NAME\" for \"$name\" complete."
			main_output="$outdir/$name.g.vcf"
			#################
			elapsed=`time_elapsed $start`
			echo -e "  $STEP_NAME=$elapsed" >> $log_file
			echo "$STEP_NAME.$name=complete" >> $resume_file
		else
			echo -e "MONGER RUN $MODULE_NAME: Step \"$STEP_NAME\" already complete for file \"$name\". Skipping..."
			main_output="$outdir/$name.g.vcf"
		fi
	fi
	STEP_NAME="genotype_gvcfs"
	if [ "`grep "$STEP_NAME.$name=complete" $resume_file`" == "" ] || [ "$force" == "true" ]
	then
		# Process start time
		start=`date +%s`
		echo -e "MONGER RUN $MODULE_NAME: Beginning step \"$STEP_NAME\" for \"$name\"."
		echo -e "$STEP_NAME:" >> $program_log_file
		#####################################################################################
		for file in $main_output
		do
			genotype_in="$genotype_in --variant $file"
		done
		command="java -jar $gatk \
			-T GenotypeGVCFs \
			-R $REFERENCE_FASTA \
			$genotype_in \
			-o $outdir/$name.vcf \
			$genotypegvcfs_args \
			>> $program_log_file 2>&1"
		eval $command
		echo -e "$command\n" >> $command_file
		mv $main_output $outdir/intermediates/
		#####################################################################################
		echo -e "MONGER RUN $MODULE_NAME: Step \"$STEP_NAME\" for \"$name\" complete."
		main_output="$outdir/$name.vcf"
		#################
		elapsed=`time_elapsed $start`
		echo -e "  $STEP_NAME=$elapsed" >> $log_file
		echo "$STEP_NAME.$name=complete" >> $resume_file
	else
		echo -e "MONGER RUN $MODULE_NAME: Step \"$STEP_NAME\" already complete for file \"$name\". Skipping..."
		main_output="$outdir/$name.vcf"
	fi
	#####################################################################################
	# Record output info for downstream modules
	echo -e "$main_output\t$name" >  $outdir/$name.outputs.txt
	echo -e "MONGER RUN $MODULE_NAME: Complete."
}
	
############################################################
if [ "$1" == "run" ]
then
	shift
	run "$MODULE_NAME" "$MODULE_INFO" "$AUTHOR_INFO" $*
elif [ "$1" == "install" ]
then
	shift
	mongerinstall "$MODULE_NAME" "$MODULE_INFO" "$AUTHOR_INFO" $*
else
	echo -e \
"SYNOPSIS:\n\
monger [run|install] $module_name\n$MODULE_INFO\n$AUTHOR_INFO"
	exit 1
fi
	
	
	