#!/usr/bin/env bash
#define MAX_ARG_PAGES 32
set -e
export SHELL=$(type -p bash)
shopt -s expand_aliases
source ~/.bashrc
# freemem=`free | awk '{print $4}'`
# freemem=`echo $freemem | cut -d' ' -f4`
# MEMLIMIT=`expr $freemem \/ 4 \* 3`
export _JAVA_OPTIONS=-Xmx2g
###############################################
MODULE_NAME=`basename "$0" | tr "[a-z]" "[A-Z]"`
module_name=`basename "$0" | tr "[A-Z]" "[a-z]"`
function beginswith { 
	case $2 in 
		"$1"*) true;; 
		*) false;; 
	esac
}
###############################################
###################
### MODULE INFO ###
###################
DESCRIPTION="SnpEff is a variant annotation and effect prediction tool. It annotates and predicts the effects of variants on genes (such as amino acid changes)."
WEBSITE="http://snpeff.sourceforge.net/SnpEff.html"
CITATIONS="\"A program for annotating and predicting the effects of single nucleotide polymorphisms, SnpEff: SNPs in the genome of Drosophila melanogaster strain w1118; iso-2; iso-3.\", Cingolani P, Platts A, Wang le L, Coon M, Nguyen T, Wang L, Land SJ, Lu X, Ruden DM. Fly (Austin). 2012 Apr-Jun;6(2):80-92. PMID: 22728672 [PubMed - in process]"
MODULE_AUTHOR="Noah Gettle"
YEAR_WRITTEN="2016"
###############################################
MODULE_INFO="DESCRIPTION:\n$DESCRIPTION\nWEBSITE:\n$WEBSITE\nCITATION:\n$CITATION"
AUTHOR_INFO="$MODULE_AUTHOR $YEAR_WRITTEN"

function mongerinstall {
	MODULE_NAME=$1
	shift
	MODULE_INFO=$1
	shift
	AUTHOR_INFO=$1
	shift
	module_name=`echo $MODULE_NAME | tr "[A-Z]" "[a-z]"`
	SUBTHREADS=1
	####################################
	############ USAGE #################
	####################################
	usage="SYNOPSIS:\nmonger install $module_name\n$MODULE_INFO\n\
OPTIONS:\n\
  -i | --install_dir [DIR]\tInstallation directory [/usr/local/]\n\
  -f | --force\t\t\tOverwrite existing program executables.\n\
  -h | --help\t\t\tPrint help message\n\n\
AUTHOR:\n\
$AUTHOR_INFO"
  
	####################################
	######## INPUT PROCESSING ##########
	####################################
	INSTALL_DIR=/usr/local
	FORCE=FALSE
	while [ "$1" != "" ]
	do
		case $1 in
			-i | --install_dir)	
				if ! `beginswith "-" $2`
				then 
					shift
					INSTALL_DIR=$1
				fi;;
			-f | --force)	
				FORCE=TRUE;;
			-h | --help)	
				echo -e $usage
				exit 1;;
			*)				
				echo -e "\nMONGER RUN $MODULE_NAME ERROR: $1 is not a valid option.\n$usage"
				exit 1						
		esac
		shift
	done

	####################################

	PATH_SEP=`echo $PATH | sed 's|:| |g'`
	LD_LIBRARY_PATH_SEP=`echo $LD_LIBRARY_PATH | sed 's|:| |g'`
	INCLUDE_SEP=`echo $INCLUDE | sed 's|:| |g'`

	cur_dir=`pwd`
	DOWNLOAD_DIR=$INSTALL_DIR/soft
	mkdir -p $DOWNLOAD_DIR

	###############################################

	####################################
	###### INSTALL DEPENDENCIES ########
	####################################

	###############################################

	####################################
	###### INSTALL MAIN PROGRAM ########
	####################################

	#############
	# FREEBAYES #
	#############
	if ! type "snpEff.jar" >/dev/null 2>/dev/null || [ $FORCE == "TRUE" ]
	then
		echo -e "> MONGER INSTALL: Installing $MODULE_NAME."
		cd $DOWNLOAD_DIR
		if ! test -d $DOWNLOAD_DIR/snpEff
		then
			if ! test -f $DOWNLOAD_DIR/snpEff_latest_core.zip
			then
				wget http://sourceforge.net/projects/snpeff/files/snpEff_latest_core.zip
			fi
			unzip $DOWNLOAD_DIR/snpEff_latest_core.zip
		fi
		ln -sf $DOWNLOAD_DIR/snpEff/SnpSift.jar $DOWNLOAD_DIR/snpEff/snpEff.jar $INSTALL_DIR/bin/
		make
		cp $DOWNLOAD_DIR/freebayes/bin/* $INSTALL_DIR/bin/
	else
		echo "> MONGER INSTALL: $MODULE_NAME already installed. Skipping..."
	fi
	snpeff_dir=`which snpEff.jar`
	snpeff_dir=`dirname $snpeff_dir`
	if `grep -q "alias snpEff.jar=" ~/.bashrc`
	then
		sed -i "s|alias snpEff.jar=.*|alias snpEff.jar='java \-jar $snpeff_dir/snpEff.jar'|" ~/.bashrc
	else
		echo "alias snpEff.jar='java -jar $snpeff_dir/snpEff.jar'" >> ~/.bashrc
	fi
	snpsift_dir=`which SnpSift.jar`
	snpsift_dir=`dirname $snpsift_dir`
	if `grep -q "alias SnpSift.jar=" ~/.bashrc`
	then
		sed -i "s|alias SnpSift.jar=.*|alias SnpSift.jar='java \-jar $snpsift_dir/SnpSift.jar'|" ~/.bashrc
	else
		echo "alias SnpSift.jar='java -jar $snpsift_dir/SnpSift.jar'" >> ~/.bashrc
	fi
}
function run {
	MODULE_NAME=$1
	shift
	MODULE_INFO=$1
	shift
	AUTHOR_INFO=$1
	shift
	module_name=`echo $MODULE_NAME | tr "[A-Z]" "[a-z]"`
	SUBTHREADS=1
	####################################
	########### FUNCTIONS ##############
	####################################

	function time_elapsed {
		end_time=`date +%s`
		elapsed_secs=`expr $end_time - $1`
		date -u -d @${elapsed_secs} +"%T"
	}
	
	####################################
	############ USAGE #################
	####################################
	usage="SYNOPSIS:\nmonger run $module_name\n$MODULE_INFO\n\
OPTIONS:\n\
  -1 | --input1\t[FILE]\tBAM/SAM input to evaluate.\n\
  -n | --name\t[STR]\tSample name (basename of outputs)\n\
  -o | --outdir\t[DIR]\tOutput directory\n\
  -t | --threads\n\
  -A | --args\t[STR]\tArguments specified as variables in a bash file.\n\
  -f | --force\t\t\tOverwrite existing files.\n\
  -S | --sort\t[c|n]\tSort outputs by alignment coordinate (c) or read name (n) [c]\n\
  -O | --output_format\t[bam|sam]\tOutput format for alignments [bam]\n\
  -h | --help\t\t\tPrint help message\n\n\
AUTHOR:\n\
$AUTHOR_INFO"

	####################################
	######## INPUT PROCESSING ##########
	####################################
	FORCE=FALSE
	if [ $# -eq 0 ]
	then
		echo -e $usage
		exit 1
	fi

	#################
	# Program specific defaults
	sort=c
	output_format=bam
	
	#################
	while [ "$1" != "" ]
	do
		case $1 in
			-1 | --input1)
				if ! `beginswith "-" "$2"`
				then
					shift
					if ! test -f $1
					then
						echo -e "\nMONGER RUN $MODULE_NAME ERROR: Cannot find input file $1."
						exit 1
					else
						in1=$1
					fi
				fi;;
			-2 | --input2)
				if ! `beginswith "-" "$2"`
				then
					shift
					if ! test -f $1
					then
						echo -e "\nMONGER RUN $MODULE_NAME WARNING: Cannot find input file $1. Skipping...\n"
					else
						in2="$1"
					fi
				fi;;
			-3 | --input3)
				if ! `beginswith "-" "$2"`
				then
					shift
					if ! test -f $1
					then
						echo -e "\nMONGER RUN $MODULE_NAME WARNING: Cannot find input file $1. Skipping...\n"
					else
						in3="$1"
					fi
				fi;;
			-I | --input_list)
				if ! `beginswith "-" "$2"`
				then
					shift
					if ! test -f $1
						then
							echo -e "\nMONGER RUN $MODULE_NAME ERROR: Cannot find input file list $1.\n"
							exit 1
						else
							input_list=$1
							field_num=`awk '{print NF}' $input_list`
							name=`awk -v last_field="$field_num" '{print $last_field}' $input_list`
							index=1
							while [ $index -lt $field_num ]
							do
								input=`awk -v field="$index" '{print $field}' $input_list`
								if ! test -f "$input"
								then
									echo -e "\nMONGER RUN $MODULE_NAME WARNING: Cannot find input file $input. Skipping...\n"
								else
									inputs="$inputs $input"
									declare "in$index=$input"
								fi
								index=$(($index + 1))
							done
						fi
				fi;;	
			-n | --name)
				if ! `beginswith "-" "$2"`
				then
					shift
					name=$1
				fi;;
			-o | --outdir)
				if ! `beginswith "-" "$2"`
				then
					shift
					outdir=$1
					mkdir -p $outdir
					if ! test -d $outdir
					then
						echo -e "\nMONGER RUN $MODULE_NAME ERROR: Could not find or create output directory $outdir.\n"
						exit 1
					fi
				fi;;
			-t | --threads)
				if ! `beginswith "-" "$2"`
				then
					shift
					SUBTHREADS=$1
				fi;;
			-A | --args)
				shift
				. $1;;
			-f | --force)
				force=true;;
			# -m | --maxmem)
			# 	shift
			# 	maxmem=$1
			# 	export _JAVA_OPTIONS=-Xmx$maxmem;;
			# 	# ulimit -v $maxmem;;
			-h | --help)
				echo -e $usage
				exit 1;;
			*)
				echo -e "\nMONGER RUN $MODULE_NAME ERROR: $1 is not a valid option.\n$usage"
				exit 1;;
		esac
		shift
	done
	
	if [ "$name" == "" ]
	then
		name=`echo $inputs | cut -d' ' -f1 | basename`
		name="${name%.*}"
	fi
	mkdir -p $outdir/logs
	mkdir -p $outdir/resume
	mkdir -p $outdir/program_logs
	mkdir -p $outdir/commands
	log_file=$outdir/logs/$name.log.txt
	resume_file=$outdir/resume/$name.resume.txt
	program_log_file=$outdir/program_logs/$name.program_log.txt
	current_proglog=$outdir/program_logs/$name.current_proglog.txt
	command_file=$outdir/commands/$name.commands.txt
	current_command=$outdir/commands/$name.current_command.txt
	main_start=`date +%s`
	if ! test -f $resume_file || [ "$force" == "true" ]
	then
		echo -e "$MODULE_NAME:" > $log_file
		echo -e "# $MODULE_NAME" > $command_file
		echo -e "$MODULE_NAME" > $resume_file
		echo -e "$MODULE_NAME" > $program_log_file
	fi
	if ! type "snpEff.jar" >/dev/null 2>/dev/null 
	then
		monger install snpeff
	fi
	mkdir -p $outdir/intermediates
	####################################
	########## MAIN PROGRAM ############
	####################################
	echo -e " INPUT:$name" >> $log_file
	# PROGRAM
	##############################
	STEP_NAME="snpeff"
	if [ "`grep "$STEP_NAME.$name=complete" $resume_file`" == "" ] || [ "$force" == "true" ]
	then
		# Process start time
		start=`date +%s`
		echo -e "MONGER RUN $MODULE_NAME: Beginning step \"$STEP_NAME\" for \"$name\"."
		echo -e "$STEP_NAME:" >> $program_log_file
		#####################################################################################
		if [ "$snpeff_database" == "" ]
		then
			echo -e "MONGER RUN $MODULE_NAME ERROR: You must specify a SnpEff database to use with the variable \'snpeff_database\'. To view available prebuild genomes type 'snpEff.jar databases'. If yours is not available you can build one by following the instructions @ \"http://snpeff.sourceforge.net/SnpEff_manual.html#databases\"."
			exit 1
		fi
		command="snpEff.jar eff \
			$snpeff_database \
			$inputs \
			$snpeff_args \
			1> $outdir/$name.vcf" # \
# 			2> $current_proglog"
		echo -e "$command\n" > $current_command
		eval $command
		cat $current_command  | sed 's|\s\+| |g' >> $command_file
		# cat $current_proglog >> $program_log_file
		#####################################################################################
		echo -e "MONGER RUN $MODULE_NAME: Step \"$STEP_NAME\" for \"$name\" complete."
		main_output=$outdir/$name.vcf
		#################
		elapsed=`time_elapsed $start`
		echo -e "$STEP_NAME: $elapsed" >> $log_file
		echo "$STEP_NAME.$name=complete" >> $resume_file
	else
		echo -e "MONGER RUN $MODULE_NAME: Step \"$STEP_NAME\" already complete for file \"$name\". Skipping..."
		main_output=$outdir/$name.vcf
	fi
	#####################################################################################
	# Record output info for downstream modules
	mkdir -p $outdir/outputs
	echo -e "$main_output\t$name"  >  $outdir/outputs/$name.outputs.txt
	main_elapsed=`time_elapsed $main_start`
	sed -i "s|$MODULE_NAME\:.*|$MODULE_NAME\: $main_elapsed|" $log_file
	echo -e "MONGER RUN $MODULE_NAME: Complete."
}
	
############################################################
if [ "$1" == "run" ]
then
	shift
	run "$MODULE_NAME" "$MODULE_INFO" "$AUTHOR_INFO" $*
elif [ "$1" == "install" ]
then
	shift
	mongerinstall "$MODULE_NAME" "$MODULE_INFO" "$AUTHOR_INFO" $*
else
	echo -e \
"SYNOPSIS:\n\
monger [run|install] $module_name\n$MODULE_INFO\n$AUTHOR_INFO"
	exit 1
fi
	
	
	