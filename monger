#!/usr/bin/env bash
#define MAX_ARG_PAGES 32
set -e
export SHELL=$(type -p bash)
. ~/.bashrc
# freemem=`free | awk '{print $4}'`
# freemem=`echo $freemem | cut -d' ' -f4`
# MEMLIMIT=`expr $freemem \/ 4 \* 3`
# ulimit -v $MEMLIMIT
###############################################
XMODULE_DIR=
MODULE_NAME=`basename "$0" | tr "[a-z]" "[A-Z]"`
function beginswith { 
case $2 in 
"$1"*) true;; 
*) false
esac
}
###############################################

function monger.run {
	####################################
	########### FUNCTIONS ##############
	####################################
	function time_elapsed {
		end_time=`date +%s`
		elapsed_secs=`expr $end_time - $1`
		date -u -d @${elapsed_secs} +"%T"
	}
	
	function edit_mongerscript {
		if [ $4 ]
		then
			if `grep -q  $'\t'"$2" $4`
			then
				sed -i "s|\t$2.*|\t$2=$3|" $4
			else
				var_value=`echo $3 | sed 's|\/|\\\/|g'`
				sed -i "/^$1:$/{N;s|\[|\[\n\t$2=$var_value|}" $4
			fi
		fi
	}
	# export -f edit_mongerscript
	
	function parse_inputs {
		if ! test -f "$1"
		then
			if ! test -d "$1"
			then
				echo "MONGER RUN ERROR: Could not find input file or directory $1"
				exit 1
			else
				for file in $1/*
				do
					inputs="$inputs $file"
				done
			fi
		else
			inputs=$1
		fi
		echo $inputs
	}
	# export -f parse_inputs

	function run_element {
		run_element=$1
		mongerscript=$2
		io_direction=$3
		outdir=$4
		MODULE_DIR=$5
		input_file=$6
		basename=$7
		force=$8
		element_opts=$9
		# re_memlimit=${10}
		if [ "$force" == "true" ]
		then
			# echo "force=$force"
			force="-f"
		else
			force=""
		fi
		if `echo $element | grep -q ":"`
		then
			program=`echo $run_element | cut -d":" -f1`
			module_args=`echo $run_element | cut -d":" -f2`
		else
			program=$run_element
		fi
		mkdir -p $outdir/input_variables	
		module=`find $MODULE_DIR -maxdepth 4 -name "$program"`
		if [ "$module" == "" ]
		then
			echo -e "\nMONGER RUN ERROR: Could not find the MongerModule \"$program\" in $MODULE_DIR.\n"
			exit -1
		fi
		input_1=`awk '{print $1}' $input_file | tr "\n" " " | sed 's/\(^\| \)-\($\| \)/ /g'`
		input_2=`awk '{print $2}' $input_file | tr "\n" " " | sed 's/\(^\| \)-\($\| \)/ /g'`
		input_3=`awk '{print $3}' $input_file | tr "\n" " " | sed 's/\(^\| \)-\($\| \)/ /g'`
		names=`awk '{print $4}' $input_file | tr "\n" " " | sed 's/\(^\| \)-\($\| \)/ /g'`
		if [ "$io_direction" == "->" ] || [ "$io_direction" == "-|" ]
		then
			parseMongerScript.pl  \
				-i $mongerscript \
				-a "PROJECT_INFO $element_opts" \
				-o $outdir/input_variables/$basename.info.tmp
			echo "name=$basename" >> $outdir/input_variables/$basename.info.tmp
			if [ "$io_direction" == "-|" ] ||  [ "$io_direction" == "=|" ]
			then
				set +e
			fi
			$module run -I $input_file \
				--args $outdir/input_variables/$basename.info.tmp \
				-o $outdir \
				$force	
			set -e
		else
			parseMongerScript.pl  \
				-i $mongerscript \
				-a "PROJECT_INFO $module_args PROGRAM_ARGUMENTS" \
				-o $outdir/$basename/info.tmp
			module_args=`echo $module_args | sed 's|\s| ::: |g'`
			set +e
			parallel -j 1 -k $module ::: run \
				::: -1 ::: $input_1 \
				::: -2 ::: $input_2 \
				::: -3 ::: $input_3 \
				::: -n ::: $names \
				::: -o ::: $outdir/$basename \
				::: --args ::: $outdir/$basename/info.tmp \
				$module_args ::: $force
			set -e
			if [ "$io_direction" != "=|" ]
			then
				for name in $names
				do
					cat $outdir/$basename/$name/outputs.txt >> $outdir/$basename/outputs.txt
				done
			fi
		fi
	}
	export -f run_element

	function run_mongerscript {
		input_file=$1
		mongerscript=$2
		# rm_memlimit=$3
		# Get relevant variables from mongerscript
		rm -rf /tmp/mongerinfo.tmp
		parseMongerScript.pl \
			-i $mongerscript \
			-a "PROJECT_INFO INPUT_INFO PROGRAM PROGRAM_ELEMENTS MODULE_ARGUMENTS" \
			-o /tmp/mongerinfo.tmp
		. /tmp/mongerinfo.tmp
		mkdir -p $OUTPUT_DIRECTORY/$PROJECT_NAME/logs
		mkdir -p $OUTPUT_DIRECTORY/$PROJECT_NAME/program_logs
		mkdir -p $OUTPUT_DIRECTORY/$PROJECT_NAME/commands
		field_num=`awk -F'[\t ]' '{print NF}' $input_file`
		basename=`awk -F'[\t ]' -v last_field="$field_num" '{print $last_field}' $input_file | head -1`
		lasting_basename=$basename
		main_start=`date +%s`
		time=`date +%y%m%e_%H%M%S`
		echo -e "##############\n\
				MAIN_$time:" >> $OUTPUT_DIRECTORY/$PROJECT_NAME/logs/$basename.log.txt
		echo -e "##############\n\
				MAIN_$time:" >> $OUTPUT_DIRECTORY/$PROJECT_NAME/program_logs/$basename.program_log.txt
		echo -e "##############\n\
				# MAIN_$time:" >> $OUTPUT_DIRECTORY/$PROJECT_NAME/commands/$basename.commands.txt
		# Set input option to be all files separately
		element_io="->"
		element_input=$input_file	
		for element in $RUN_PROGRAM
		do
			first_subelement=true
			if [ "$element" != "->" ] && [ "$element" != "=>" ] &&\
				 [ "$element" != "-|" ] && [ "$element" != "=|" ]
			then
				# Record element start time
				element_caps=`echo $element | tr '[a-z]' '[A-Z]'`
				element_start=`date +%s`
				echo -e "\t$element_caps:" >> $OUTPUT_DIRECTORY/$PROJECT_NAME/logs/$basename.log.txt
				echo -e "$element_caps:" >> $OUTPUT_DIRECTORY/$PROJECT_NAME/program_logs/$basename.program_log.txt
				echo -e "# $element_caps" >> $OUTPUT_DIRECTORY/$PROJECT_NAME/commands/$basename.commands.txt
				#
				element_name=$element
				# Get components (subelements) of current program element
				element=${!element_name}
				# Assign subelement input and input options to default settings if first process
				if [ "$first_subelement" == "true" ]
				then
					subelement_input=$element_input
					subelement_io=$element_io
				fi
				# If no subelements of current element, try to run as independent thing.
				if [ "$element" == "" ]
				then
					element=$element_name
				fi
				# Execute each subelement
				for subelement in $element
				do
					if [ "$subelement" != "->" ] && [ "$subelement" != "=>" ] &&\
						 [ "$subelement" != "-|" ] && [ "$subelement" != "=|" ] &&\
							  [ "$subelement" != "+" ]
					then
						# Determine if subelement is beginning of a groupped set of subelements (subprocess i.e. Should be run in parallel)
						if `echo $subelement | grep -q "^("` && [ "$PARALLEL" == "TRUE" ]
						then
							subprocess_subelements=${subelement:1}
							subprocess=true
						# If subelement is not a component of a subprocess run normally  
						elif [ "$subprocess" != "true" ] || [ "$PARALLEL" != "TRUE" ]
						then
							if `echo $subelement | grep -q "^("`
							then
								subelement_name=${subelement:1}
								subprocess=start
							elif `echo $subelement | grep -q ")$"`
							then
								subelement_name=${subelement:0:${#subelement}-1}
								subprocess=end
							else
								# Record subelement start time
								subelement_name=`echo $subelement | awk -F':' '{print $1}'`
							fi
							subelement_opts=`echo $subelement | awk -F':' '{print $2}'`
							if [ "$element_name" == "$subelement" ]
							then
								subelement_outdir=$OUTPUT_DIRECTORY/$PROJECT_NAME/$element_name
							else
								if [ `echo "$element" | sed "s| |\n|g" | grep -c "$subelement"` -gt 1 ]
								then
									var="number_$subelement"
									new_num=$((${!var} + 1 ))
									declare "number_$subelement=$new_num"
									if [ "$subelement_opts" != "" ]
									then
										subelement_outdir=$OUTPUT_DIRECTORY/$PROJECT_NAME/$element_name/$subelement_name.$subelement_opts.${!var}
									else
										subelement_outdir=$OUTPUT_DIRECTORY/$PROJECT_NAME/$element_name/$subelement_name.${!var}
									fi
								else
									if [ "$subelement_opts" != "" ]
									then
										subelement_outdir=$OUTPUT_DIRECTORY/$PROJECT_NAME/$element_name/$subelement_name.$subelement_opts
									else
										subelement_outdir=$OUTPUT_DIRECTORY/$PROJECT_NAME/$element_name/$subelement_name
									fi
								fi
							fi
							field_num=`awk -F'[\t ]' '{print NF}' $subelement_input`
							basename=`awk -F'[\t ]' -v last_field="$field_num" '{print $last_field}' $subelement_input | head -1`
							if [ "$subelement_io" == "=>" ] || [ "$subelement_io" == "=|" ]
							then
								basename=${basename%.*}
							fi
							if [ "$subelement_io" == "+" ] || [ "$subprocess" != "" ]
							then
								basename="$basename.$subelement_name"
							fi
							force=false
							for f in $FORCE
							do
								case "$f" in
									"$subelement_name" | "$element_name")
										force=true;;
								esac
							done
							run_element \
								$subelement_name \
								$mongerscript \
								$subelement_io \
								$subelement_outdir \
								$MODULE_DIR \
								$subelement_input \
								$basename \
								$force \
								$subelement_opts
							if test -f $subelement_outdir/outputs/$basename.outputs.txt
							then
								if [ "$subelement_io" != "-|" ] && [ "$subelement_io" != "=|" ] && [ "$subelement_io" != "+" ] && [ "$subprocess" == "" ]
								then
									subelement_input=$subelement_outdir/outputs/$basename.outputs.txt
								elif [ "$subelement_io" == "+" ] || [ "$subprocess" != "" ]
								then
									newfield_num=`head -1  $subelement_outdir/outputs/$basename.outputs.txt | awk -F'[\t ]' '{print NF}'`
									new=`head -1  $subelement_outdir/outputs/$basename.outputs.txt | awk -F'[\t ]' -v last_field="$newfield_num" '{$last_field = ""; print}'`
									if [ "$subsubelement_out" == "" ]
									then
										subsubelement_out="$new"
									else
										subsubelement_out="$subsubelement_out $new"
									fi
									echo "$subsubelement_out $lasting_basename.$element_name" | tr ' ' '\t' > $OUTPUT_DIRECTORY/$PROJECT_NAME/$element_name/$lasting_basename.current_outputs
									if [ "$subprocess" == "end" ]
									then
										subelement_input=$OUTPUT_DIRECTORY/$PROJECT_NAME/$element_name/$lasting_basename.current_outputs
										subprocess=""
									fi
								fi
							fi
							sed 's/^/\t\t/' $subelement_outdir/logs/$basename.log.txt >> $OUTPUT_DIRECTORY/$PROJECT_NAME/logs/$basename.log.txt
							cat $subelement_outdir/program_logs/$basename.program_log.txt >> $OUTPUT_DIRECTORY/$PROJECT_NAME/program_logs/$basename.program_log.txt
							cat $subelement_outdir/commands/$basename.commands.txt >> $OUTPUT_DIRECTORY/$PROJECT_NAME/commands/$basename.commands.txt
						elif `echo $subelement | grep -q ")$"` && [ "$PARALLEL" == "true" ]
						then
							last_subprocess_subelement=${subelement:0:${#subelement}-1}
							subprocess_subelements="$subprocess_subelements $last_subprocess_subelement"
							subelement_outdirs=`parallel echo \
								::: $OUTPUT_DIRECTORY/$PROJECT_NAME/$element_name/ \
								::: $subprocess_subelements | \
								tr -d " "`
							basename=`cut -d" " -f4 $subelement_input | tr "\n" " " | head -1`
							if [ "$subelement_io" == "=>" ] || [ "$subelement_io" == "=|" ]
							then
								basename=${basename%.*}
							fi
							for subprocess_subelement in $subprocess_subelements
							do
								if `echo "$FORCE" | grep -q "$subprocess_subelement"` || `echo "$FORCE" | grep -q "$element_name"`
								then
									force="$force true"
								else
									force="$force false"
								fi
								module_arg=$subelement"_modargs"
								module_arg=${!module_arg}
								if [ "$module_arg" != "" ]
								then
									module_args="$module_args \"$module_arg\""
								else
									module_args="$module_args \"0\""
								fi
							done
							# echo -e "$first_args"
# 							echo -e \
# "parallel --link run_element\n\
# ::: $subprocess_subelements\n\
# ::: $mongerscript\n\
# ::: $subelement_io\n\
# ::: $subelement_outdirs\n\
# ::: $MODULE_DIR\n\
# ::: $subelement_input\n\
# ::: $basename\n\
# ::: $force\n\
# ::: $module_args"

							# subpro_count=`echo $subprocess_subelements | wc -w`
							# subjobnum=`expr $SUBTHREADS \/ $subpro_count`
							# if [ $subjobnum -lt 1 ]
							# then
							# 	subjobnum=1
							# elif [ $subjobnum -ge 1 ]
							# then
							# 	subjobnum=$subpro_count
							# fi
							# re_memlimit=`expr $rm_memlimit \/ $subjobnum`
							# echo "$run_element_memlimit"
							parallel -j 1 --link run_element ::: $subprocess_subelements \
								::: $mongerscript \
								::: $subelement_io \
								::: $subelement_outdirs \
								::: $MODULE_DIR \
								::: $subelement_input \
								::: $basename \
								::: $force \
								::: $module_args
							if [ "$subelement_io" != "-|" ] && [ "$subelement_io" != "=|" ]
							then
								rm -rf $OUTPUT_DIRECTORY/$PROJECT_NAME/$element_name/$basename.outputs.txt
								for sub_outdir in $subelement_outdirs
								do
									if test -f "$sub_outdir/$basename/output.txt"
									then
										cat $sub_outdir/$basename/output.txt >> $OUTPUT_DIRECTORY/$PROJECT_NAME/$element_name/$basename.outputs.txt
									fi
									if test -f "$sub_outdir/$basename/log.txt"
									then
										cat $sub_outdir/$basename/log.txt >> $OUTPUT_DIRECTORY/$PROJECT_NAME/logs/$basename.log.txt
									fi
								done
							fi
							subprocess=false
						else
							subprocess_subelements="$subprocess_subelements $subelement"
						fi
					elif [ "$subprocess" == "" ]
					then
						subelement_io=$subelement
					else
						subsubelement_io=$subelement
					fi
					first_subelement=false
				done
				if [ "$element_io" != "-|" ] || [ "$element_io" != "=|" ]
				then
					element_input=$subelement_input
				fi
				# Record element time duration
				element_elapsed=`time_elapsed $element_start`
				sed -i "s|$element_caps\:.*|$element_caps\: $element_elapsed|" $OUTPUT_DIRECTORY/$PROJECT_NAME/logs/$basename.log.txt
				################
				mkdir -p $OUTPUT_DIRECTORY/$PROJECT_NAME/$element_name/element_outputs
				field_num=`awk '{print NF}' $subelement_input`
				name=`awk -v last_field="$field_num" '{print $last_field}' $subelement_input`
				index=1
				while [ $index -lt $field_num ]
				do
					outfile=`awk -v field="$index" '{print $field}' $subelement_input`
					cp $outfile $OUTPUT_DIRECTORY/$PROJECT_NAME/$element_name/element_outputs/
					index=$(($index + 1))
				done
			else
				element_io=$element
			fi
		done
		# Record element time duration
		main_elapsed=`time_elapsed $main_start`
		sed -i "s|MAIN_$time\:.*|MAIN_$time\: $main_elapsed|" $OUTPUT_DIRECTORY/$PROJECT_NAME/logs/$basename.log.txt
	}
	export -f run_mongerscript

	####################################
	############ USAGE #################
	####################################

	OUTPUT_DIRECTORY=~/monger.output
	PROJECT_NAME=`date +"%d-%m-%y"`
	PHRED_BASE=33
	THREADS=`nproc`
	SUBTHREADS=1
	SEQUENCING_FORMAT=se
	XMODULE_DIR=
	PAIRED=1
	help=false

	usage=\
"\nSYNOPSIS:\n\
monger run <PROGRAM/MONGERSCRIPT>\n\n\
DESCRIPTION:\n\
Runs an NGS program (as a MongerModule) or MongerScript through Monger.\n\n\
OPTIONS:\n\
-M | --MODULE_DIR\t[DIR]\tDirectory in which to search for MongerModules[$MODULE_DIR].\n\
-T | --THREADS\t[INT]\tTotal number of threads to allocate [$THREADS]\n\
-t | --SUBTHREADS\t[INT]\tNumber of threads to make available to each input being processed [1]\n\
-a | --args\t[STR]\tQuoted string containing arguments for the specified MongerModule (if not a MongerScript). To access a MongerModule's usage type 'monger run <PROGRAM> -h .\n\n\
Project Info:\n\
-o | --OUTPUT_DIRECTORY\t[DIR]\tOutput directory [~/monger.output]\n\
-p | --PROJECT_NAME\t[STR]\tName of project. This helps differentiate different runs [DATE]\n\
-b | --PHRED_BASE\t[33|64]\tFor FASTQ inputs, phred quality base score.[33]\n\
-f | --SEQUENCING_FORMAT\t[se|pe|mp]\tFormat of FASTA/FASTQ files (se=Single-end, pe=Paired-end, mp=Mate-Pair)[se]\n\
-P | --PLOIDY\t[haploid|diploid]\n\
-Rf | --REFERENCE_FASTA\t[FILE]\n\
-Rg | --REFERENCE_GFF\t[FILE]\tGFF3 formated reference annotations.\n\
-F | --FORCE\t[STR]\tForce rerun element or module (ALL=Force rerun all elements).\n\n\
Input Info:\n\
-i | --INPUTS\t[FILE/DIR]\tInput file(s) or directory containing input files.\n\
-I | --INPUTS_LIST\t[FILE]\tText file containing files to input. Files should be one per line for single-end, two for mates.\n\
-x | --PAIRED [INT]\tIf input files are paired and but not specified in a list, the field relative to end (based on \"_\" as separator) in each name that indicates pair number\n\n\
Program:\n\
-r | --RUN_PROGRAM\t[STR]\tString representing how inputs should be processed (for more details see manual)\n\n\
-h | --help\t\t\tPrint help message\n\n\
AUTHOR:\n\
Noah Gettle 2016"

	####################################
	######## INPUT PROCESSING ##########
	####################################
	# Read in inputs #
	if [ $# -eq 0 ]
	then
		echo -e $usage
		exit 1
	fi

	input_num=$#

	if `beginswith "-" $1`
	then
		if [ "$1" == "-h" ] || [ "$1" == "--help" ]
		then
			echo -e $usage
			exit 1
		fi
	else
		if test -f "$1"
		then
			if [ `head -1 $1` == "#mongerscript" ]
			then
				MONGERSCRIPT=$1
				shift
				cp $MONGERSCRIPT /tmp/mongerscript.txt
				MONGERSCRIPT=/tmp/mongerscript.txt
				if ! test -f $MONGERSCRIPT
				then
					echo -e "\nMONGER RUN ERROR: Could not find MongerScript $MONGERSCRIPT.\n"
					exit -1
				else
				# Add default info to script
					DEFAULTS="OUTPUT_DIRECTORY PROJECT_NAME PHRED_BASE THREADS SUBTHREADS SEQUENCING_FORMAT MODULE_DIR"
					for default in $DEFAULTS
					do
						if ! `grep -q $'\t'"$default" $MONGERSCRIPT` || `grep -q $'\t'"$default=$" $MONGERSCRIPT` || `grep -q $'\t'"$default$" $MONGERSCRIPT`
						then
							edit_mongerscript PROJECT_INFO $default ${!default} $MONGERSCRIPT
						fi
					done
					if ! `grep -q $'\tPAIRED' $MONGERSCRIPT` || `grep -q $'\tPAIRED=$' $MONGERSCRIPT` || `grep -q $'\tPAIRED$' $MONGERSCRIPT`
					then
						edit_mongerscript  INPUT_INFO PAIRED $PAIRED $MONGERSCRIPT
					fi
					parseMongerScript.pl \
						-i $MONGERSCRIPT \
						-a "PROJECT_INFO INPUT_INFO PROGRAM PROGRAM_ELEMENTS" \
						-o /tmp/mongerinfo.tmp
					. /tmp/mongerinfo.tmp
					# rm -rf /tmp/mongerinfo.tmp
				fi
				if ! test -d $MODULE_DIR
				then
					echo -e "\nMONGER RUN ERROR: MongerModule directory $MONGER_DIR does not exist.\n"
					exit 1
				fi
			else
				program=$1
				shift
			fi
		else
			program=$1
			shift
		fi
	fi

	while [ "$1" != "" ]
	do
		case $1 in
			-M | MODULE_DIR)
				if ! `beginswith "-" $2`
				then
					shift
					MODULE_DIR=$1
					edit_mongerscript PROJECT_INFO MODULE_DIR $1 $MONGERSCRIPT
				fi;;
			-T | THREADS)
				if ! `beginswith "-" $2`
				then
					shift
					THREADS=$1
					edit_mongerscript PROJECT_INFO THREADS $1 $MONGERSCRIPT
				fi;;
			-t | SUBTHREADS)
				if ! `beginswith "-" $2`
				then
					shift
					SUBTHREADS=$1
					edit_mongerscript PROJECT_INFO SUBTHREADS $1 $MONGERSCRIPT
				fi;;
			-a | --args)
				shift
				args=$1;;
			-o | --OUTPUT_DIRECTORY)
				if ! `beginswith "-" "$2"`
				then
					shift
					OUTPUT_DIRECTORY=$1
					edit_mongerscript PROJECT_INFO OUTPUT_DIRECTORY $1 $MONGERSCRIPT
				fi;;
			-p | --PROJECT_NAME)		
				shift
				PROJECT_NAME=$1
				edit_mongerscript PROJECT_INFO PROJECT_NAME $1 $MONGERSCRIPT;;
			-b | --PHRED_BASE)
				if ! `beginswith "-" $2`
				then
					shift
					PHRED_BASE=$1
					if [ "$PHRED_BASE" != "33" ] && [ "$PHRED_BASE" != "64" ]
					then
						echo -e "MONGER RUN WARNING: The phred-base argument (-b | --PHRED_BASE) you specified ($PHRED_BASE) is not valid (33|64). Treating as \"33\"..."
						PHRED_BASE=33
					fi
					edit_mongerscript PROJECT_INFO PHRED_BASE $1 $MONGERSCRIPT
				fi;;
			-f | --SEQUENCING_FORMAT)
				if ! `beginswith "-" $2`
				then
					shift
					SEQUENCING_FORMAT="`echo $1 | tr "[A-Z]" "[a-z]"`"
					if [ "$SEQUENCING_FORMAT" != "se" ] && [ "$SEQUENCING_FORMAT" != "pe" ] && [ "$SEQUENCING_FORMAT" != "mp" ]
				then
					echo -e "MONGER RUN WARNING: The sequencing format argument (-f | --SEQUENCING_FORMAT) you specified ($SEQUENCING_FORMAT) is not valid (se|pe|mp). Treating as \"se\"..."
					SEQUENCING_FORMAT="se"
				fi
					edit_mongerscript PROJECT_INFO SEQUENCING_FORMAT $1 $MONGERSCRIPT
				fi;;
			-P | --PLOIDY)
				if ! `beginswith "-" "$2"`
				then
					shift
					PLOIDY=$1
					edit_mongerscript PROJECT_INFO PLOIDY $1 $MONGERSCRIPT
				fi;;
			-Rf | --REFERENCE_FASTA)
				if ! `beginswith "-" "$2"`
				then
					shift
					REFERENCE_FASTA=$1
					edit_mongerscript PROJECT_INFO REFERENCE_FASTA $1 $MONGERSCRIPT
				fi;;
			-Rg | --REFERENCE_GFF)
				if ! `beginswith "-" "$2"`
				then
					shift
					REFERENCE_GFF=$1
					edit_mongerscript PROJECT_INFO REFERENCE_GFF $1 $MONGERSCRIPT
				fi;;
			-F | --FORCE)
				while ! `beginswith "-" "$2"` && [ "$2" != "" ]
				do
					shift
					FORCE="$FORCE $1"
				done
				edit_mongerscript PROJECT_INFOFORCE "$1" $MONGERSCRIPT;;
			-i | --INPUTS)
				while ! `beginswith "-" "$2"` && [ "$2" != "" ]
				do
					shift
					INPUTS="$INPUTS $1"
				done
				edit_mongerscript INPUT_INFO INPUTS "$1" $MONGERSCRIPT;;		
			-I | --INPUTS_LIST)	
				while ! `beginswith "-" "$2"` && [ "$2" != "" ]
				do
					shift
					INPUTS_LIST="$INPUTS_LIST $1"
				done
				edit_mongerscript INPUT_INFO INPUTS_LIST "$1" $MONGERSCRIPT;;
			-x | --PAIRED)
				if ! `beginswith "-" "$2"`
				then
					shift
					PAIRED=$1
					edit_mongerscript INPUT_INFO PAIRED "$1" $MONGERSCRIPT
				fi;;
			-r | --RUN_PROGRAM)
				if ! `beginswith "-" "$2"`
				then
					shift
					RUN_PROGRAM=$1
					edit_mongerscript PROGRAM RUN_PROGRAM "$1" $MONGERSCRIPT
				fi;;
			-h | --help)	
				help=true;;
			*)				
				echo -e "MONGER RUN ERROR: \"$1\" not recognized as a valid option."
				exit 1;;			
		esac
		shift
	done
	
	# Check inputs #
	if [ "$MONGERSCRIPT" == "" ]
	then
		if [ "$program" != "" ]
		then
			if ! test -d $MODULE_DIR
			then
				echo -e "\nMONGER RUN ERROR: MongerModule directory $MODULE_DIR does not exist.\n"
				exit 1
			fi
			if `echo $program | grep -qv "./."`
			then
				module=`find $MODULE_DIR -maxdepth 4 -name "$program"`
			fi
			if [ "$module" == "" ]
			then
				echo -e "\nMONGER RUN ERROR: Could not find the MongerModule \"$program\" in $MODULE_DIR. If this is a MongerScript, it needs to start with \"#mongerscript\".\n"
				exit 1
			else
				input_helptest="$INPUTS $INPUTS_LIST"
				if [ "$help" == "true" ] || [ "$input_helptest" == " " ]
				then
					$module run -h
				fi
				RUN_PROGRAM=$program
			fi
		fi
	fi	
	MAIN_DIR=$OUTPUT_DIRECTORY/$PROJECT_NAME
	mkdir -p $MAIN_DIR
	if ! test -d "$MAIN_DIR"
	then
		echo -e "MONGER RUN ERROR: Could not find or create output directory $MAIN_DIR."
		exit 1
	fi
	rm -rf $MAIN_DIR/input_files.txt

	if [ "$INPUTS" != "" ]
	then
		for input in $INPUTS
		do
			new_inputs=`parse_inputs $input`
			inputs="$inputs $new_inputs"
		done
		if [ "`echo $SEQUENCING_FORMAT | tr "[A-Z]" "[a-z]"`" == "pe" ] || [ "`echo $SEQUENCING_FORMAT | tr "[A-Z]" "[a-z]"`" == "mp" ]
		then
			findpairs.pl -p $PAIRED -o $MAIN_DIR/input_files.txt -i "$inputs"
		else
			for input in $inputs
			do
				filename=$(basename "$input")
				name="${filename%.*}"
				echo -e "$input\t$name" >> $MAIN_DIR/input_files.txt
			done
		fi
	fi

	if [ "$INPUTS_LIST" != "" ]
	then
		for list in $INPUTS_LIST
		do
			if ! test -f "$list"
			then
				echo -e "MONGER RUN ERROR: Could not find input list file $1"
				exit 1
			else
				cat $list >> $MAIN_DIR/input_files.txt
			fi
		done
	fi
	
	if [ `wc -w $MAIN_DIR/input_files.txt | cut -d" " -f1` -eq 0 ]
	then
		echo -e "MONGER RUN ERROR: No input files detected."
		exit 1
	fi

	if [ "$RUN_PROGRAM" == "" ]
	then
		echo -e "\nMONGER RUN ERROR: Could not figure out what to do with the inputs.\n"
		exit 1
	fi
	mkdir -p $MAIN_DIR/mongerscripts
	index=1
	while test -f "$MAIN_DIR/mongerscripts/mongerscript.$index.txt"
	do
		index=`expr $index + 1`
	done
	if [ "$MONGERSCRIPT" == "" ]
	then
		MONGERSCRIPT=$MAIN_DIR/mongerscripts/mongerscript.$index.txt
		echo -e \
"PROJECT_INFO:\n\
[\n\
\tOUTPUT_DIRECTORY=$OUTPUT_DIRECTORY\n\
\tPROJECT_NAME=$PROJECT_NAME\n\
\tPHRED_BASE=$PHRED_BASE\n\
\tSEQUENCING_PLATFORM=$SEQUENCING_PLATFORM\n\
\tTHREADS=$THREADS\n\
\tSEQUENCING_FORMAT=$SEQUENCING_FORMAT\n\
\tPLOIDY=$PLOIDY\n\
\tREFERENCE_FASTA=$REFERENCE_FASTA\n\
\tREFERENCE_GFF=$REFERENCE_GFF\n\
\tMODULE_DIR=$MODULE_DIR\n\
\tFORCE=$FORCE\n\
]\n\
INPUT_INFO:\n\
[\n\
\tINPUTS_LIST=$MAIN_DIR/input_files.txt\n\
]\n\
PROGRAM:\n\
[\n\
\tRUN_PROGRAM=\"$RUN_PROGRAM\"\n\
]\n\
PROGRAM_ELEMENTS:\n\
[\n\
]\n\
MODULE_ARGS:\n\
[
\t$RUN_PROGRAM-modargs=$args\n\
]"\
	> $MONGERSCRIPT
	else
		cp $MONGERSCRIPT $MAIN_DIR/mongerscripts/mongerscript.$index.txt
		MONGERSCRIPT=$MAIN_DIR/mongerscripts/mongerscript.$index.txt
	fi
	####################################
	######### RUN MONGERSCRIPT  ########
	####################################

	# while read input_line
	# do
	# 	echo $input_line > $MAIN_DIR/current_input.txt
	# 	run_mongerscript $MAIN_DIR/current_input.txt $MONGERSCRIPT
	# done < $MAIN_DIR/input_files.txt
	mkdir -p $MAIN_DIR/inputs
	while read input_line
	do
		field_num=`echo $input_line | awk -F'[\t ]' '{print NF}'`
		name=`echo $input_line | awk -F'[\t ]' -v last_field="$field_num" '{print $last_field}'`
		echo "$input_line" > $MAIN_DIR/inputs/$name.inputs.txt
		input_files="$input_files $MAIN_DIR/inputs/$name.inputs.txt"
	done < $MAIN_DIR/input_files.txt

	# jobnum=`expr $THREADS \/ $SUBTHREADS`
	# inputnum=`echo $inputs | wc -w`
	# if [ $jobnum -eq 0 ]
	# then
	# 	jobnum=1
	# elif [ $jobnum -gt $inputnum ]
	# then
	# 	jobnum=$inputnum
	# fi
	# echo -e "parallel -j $jobnum -k run_mongerscript \n::: $input_files \n::: $MONGERSCRIPT"
	# rm_memlim=`expr $MEMLIMIT \/ $jobnum`
	for file in $input_files
	do
		run_mongerscript $file $MONGERSCRIPT
	done
	# parallel -j 1 -k run_mongerscript ::: $input_files ::: $MONGERSCRIPT
}

function monger.install {
	XINSTALL_DIR=
	XMODULE_DIR=

	####################################
	############ USAGE #################
	####################################
	usage=\
"SYNOPSIS:\n\
monger install <PROGRAM> [ARGS]\n\n\
DESCRIPTION:\n\
Install programs that are components of Monger pipelines.\
By default, Monger install modules will attempt to determine \
if specified program and its requisite dependencies are already installed. \
If not, an attempt will be made to install these.\n\n\
OPTIONS:\n\
-i | --install_dir\t[DIR]\tInstallation directory [$INSTALL_DIR]\n\
-d | --module_dir\t[DIR]\tDirectory containing Monger install modules [$MODULE_DIR]\n\
-c | --configs\t[FILE]\tConfiguration file\n\
-f | --force\t\t\tOverwrite existing program executables.\n\
-h | --help\t\t\tPrint help message\n\n\
AUTHOR:\n\
Noah Gettle 2016"

	####################################
	######## INPUT PROCESSING ##########
	####################################
	if [ $# -eq 0 ]
	then
		echo -e $usage
		exit 1
	fi

	while ! `beginswith "-" "$1"` && [ "$1" != "" ]
	do
		if [ "$programs" == "" ]
		then
			programs=$1
		else
			programs="$programs $1"
		fi
		shift
	done

	while [ "$1" != "" ]
	do
		case $1 in
			-i | --install_dir)
				if ! `beginswith "-" "$2"`
				then
					shift
					INSTALL_DIR=$1
				fi;;
			-d | --module_dir)
				if ! `beginswith "-" "$2"`
				then
					shift
					MODULE_DIR=$1
				fi;;
			-c | --configs)	
				if ! `beginswith "-" "$2"`
				then
					shift
					. $1
				fi;;
			-f | --force)
				FORCE="-f";;
			-h | --help)
				if [ "$programs" != "" ]
				then
					for program in $programs
					do
						module=`find $MODULE_DIR -maxdepth 4 -name "$program"`
						if [ "$module" != "" ]
						then
							$module install -h
						fi
					done
				else
					echo -e $usage
					exit 1
				fi;;
			*)	
				echo -e "MONGER INSTALL ERROR: \"$1\" not recognized as a valid option\n\n$usage"
				exit 1;;				
		esac
		shift
	done

	####################################
	# NEED to change to make more portable #
	if ! `echo $PATH | grep -q "$INSTALL_DIR/bin"` # [[ ":$PATH:" != *":$INSTALL_DIR/bin:"* ]]
	then
		echo "1.5"
		if ! `grep -q "^export PATH=" ~/.bashrc` # > /dev/null
		then
			echo "1.75"
			echo -e "export PATH=$INSTALL_DIR/bin:$PATH" >> ~/.bashrc
		else
			sed -i'' -e "s|export PATH=.*|export PATH=$INSTALL_DIR/bin:$PATH|g" ~/.bashrc
			rm -rf ~/.bashrc-e
		fi 
		. ~/.bashrc
	fi
	if ! `echo $LD_LIBRARY_PATH | grep -q "$INSTALL_DIR/lib"` #[[ ":$LD_LIBRARY_PATH:" != *":$INSTALL_DIR/lib:"* ]]
	then
		if ! grep "^export LD_LIBRARY_PATH=" ~/.bashrc > /dev/null
		then
			echo -e "export LD_LIBRARY_PATH=$INSTALL_DIR/lib:$LD_LIBRARY_PATH" >> ~/.bashrc
		else
			sed -i'' -e "s|export LD_LIBRARY_PATH=.*|export LD_LIBRARY_PATH=$INSTALL_DIR/lib:$LD_LIBRARY_PATH|g" ~/.bashrc
			rm -rf ~/.bashrc-e
		fi 
		. ~/.bashrc
	fi
	if ! `echo $LD_LIBRARY_PATH | grep -q "$INSTALL_DIR/lib64"` #[[ ":$LD_LIBRARY_PATH:" != *":$INSTALL_DIR/lib64:"* ]]
	then
		if ! grep "^export LD_LIBRARY_PATH=" ~/.bashrc > /dev/null
		then
			echo -e "export LD_LIBRARY_PATH=$INSTALL_DIR/lib64:$LD_LIBRARY_PATH" >> ~/.bashrc
		else
			sed -i'' -e "s|export LD_LIBRARY_PATH=.*|export LD_LIBRARY_PATH=$INSTALL_DIR/lib64:$LD_LIBRARY_PATH|g" ~/.bashrc
			rm -rf ~/.bashrc-e
		fi 
		. ~/.bashrc
	fi
	if ! `echo $INCLUDE | grep -q "$INSTALL_DIR/include"` #[[ ":$INCLUDE:" != *":$INSTALL_DIR/include:"* ]]
	then
		if ! grep "^export INCLUDE=" ~/.bashrc > /dev/null
		then
			echo -e "export INCLUDE=$INSTALL_DIR/include:$INCLUDE" >> ~/.bashrc
		else
			sed -i'' -e "s|export INCLUDE=.*|export INCLUDE=$INSTALL_DIR/include:$INCLUDE|g" ~/.bashrc
			rm -rf ~/.bashrc-e
		fi 
		. ~/.bashrc
	fi
	mkdir -p $INSTALL_DIR/bin
	mkdir -p $INSTALL_DIR/include
	mkdir -p $INSTALL_DIR/lib
	mkdir -p $INSTALL_DIR/lib64
	mkdir -p $INSTALL_DIR/etc
	mkdir -p $INSTALL_DIR/man

	####################################
	######## INSTALL MODULES ###########
	####################################
	for program in $programs
	do
		if [ "$program" != "" ]
		then
			module=`find $MODULE_DIR -maxdepth 4 -name "$program"`
			if [ "$module" != "" ]
			then
				$module install -i $INSTALL_DIR $FORCE
			else
				echo -e "MONGER INSTALL WARNING: Could not find module $program. Skipping..."
			fi
		fi
	done
}







####################################
############ USAGE #################
####################################
usage=\
"\nSYNOPSIS:\n\
monger <run|install> <MODULE>\n\n\
DESCRIPTION:\n\
MOdular Next-Gen sequence processing and analysis program.\n\n\
To see function specific arguments type \"monger <run|install> --help\".\n
To see module specific arguments type \"monger <run|install> <MODULE> --help\".\n\n\
FUNCTIONS:\n\
install\tInstalls all programs necessary to run a module.\n\
run\tRuns module with given inputs and arguments.\n\
OPTIONS:\n\
  -h | --help\t\t\tPrint help message\n\n\
AUTHOR:\n\
Noah Gettle 2016"

####################################
######## INPUT PROCESSING ##########
####################################
if [ $# -eq 0 ]
then
	echo -e $usage
	exit 1
fi

function=`echo $1 | tr "[A-Z]" "[a-z]"`
shift
if [ "$function" == "run" ]
then
	monger.run $*
elif [ "$function" == "install" ]
then
	monger.install $*
elif [ "$function" == "avail" ]
then
	tree $MODULE_DIR
else
	echo -e $usage
	exit 1
fi


